# -*- coding: utf-8 -*-
"""usedvehiclehost.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IBYgloiG79RIQUw0EO_1-fvQbiOY0rN3
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
import plotly.express as px
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, MinMaxScaler, RobustScaler, OrdinalEncoder
from sklearn.preprocessing import LabelEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline,make_pipeline

df_train=pd.read_csv('train-data.csv')

df_test=pd.read_csv('test-data.csv')

listtrain = df_train['Name']
listtest = df_test['Name']

df_train['Cars'] = df_train['Name'].str.split(" ").str[0] + ' ' +df_train['Name'].str.split(" ").str[1]
df_test['Cars'] = df_test['Name'].str.split(" ").str[0] + ' ' +df_test['Name'].str.split(" ").str[1]

set(df_test['Cars']).issubset(set(df_train['Cars']))

listtrain = df_train['Cars']
listtest = df_test['Cars']

df_test.drop(df_test[df_test['Cars'].isin(['Toyota Land', 'Hindustan Motors', 'Fiat Abarth', 'Nissan 370Z', 
                                  'Isuzu MU', 'Bentley Flying', 'OpelCorsa 1.4Gsi'])].index, inplace = True)

listtrain = df_train['Cars']
listtest = df_test['Cars']

df_train['Name']=df_train['Cars']

df_test['Name']=df_test['Cars']

df_train['Mileage'] = df_train['Mileage'].fillna('18.9 kmpl')

df_train['Engine'] = df_train['Engine'].fillna('1197 CC')

df_test['Engine'] = df_test['Engine'].fillna('1197 CC')

df_train['Power']=df_train['Power'].fillna('74 bhp')

df_test['Power']=df_test['Power'].fillna('74 bhp')

df_train['Seats'].fillna(df_train['Seats'].mean(),inplace=True)

df_test['Seats'].fillna(df_test['Seats'].mean(),inplace=True)

df_train.drop(['New_Price'],axis=1,inplace=True)
df_train.drop(['Unnamed: 0'],axis=1,inplace=True)

df_test.drop(['New_Price'],axis=1,inplace=True)
df_test.drop(['Unnamed: 0'],axis=1,inplace=True)

#milage
df_train['Mileage']=df_train['Mileage'].str.replace(' kmpl','')
df_train['Mileage']=df_train['Mileage'].str.replace(' km/kg','')

df_train['Mileage']=df_train['Mileage'].astype(float)

df_test['Mileage']=df_test['Mileage'].str.replace(' kmpl','')
df_test['Mileage']=df_test['Mileage'].str.replace(' km/kg','')

df_test['Mileage']=df_test['Mileage'].astype(float)

df_train['Engine']=df_train['Engine'].str.replace(' CC','')
df_train['Engine']=df_train['Engine'].astype(float)
df_train['Power']=df_train['Power'].str.replace(' bhp','')

df_train['Power']=df_train['Power'].str.replace('null','74')
df_train['Power']=df_train['Power'].str.replace('nan','74')
df_train['Power']=df_train['Power'].astype(float)

df_test['Engine']=df_test['Engine'].str.replace(' CC','')
df_test['Engine']=df_test['Engine'].astype(float)
df_test['Power']=df_test['Power'].str.replace(' bhp','')

df_test['Power']=df_test['Power'].str.replace('null','74')
df_test['Power']=df_test['Power'].str.replace('nan','74')
df_test['Power']=df_test['Power'].astype(float)

# from scipy import stats
# #applying log transformation
# df_train['Price'] = np.log(df_train['Price'])
# #transformed histogram and normal probability plot
# #sns.distplot(data['Price']);
# sns.distplot(df_train['Price'], fit=None);
# fig = plt.figure()
# res = stats.probplot(df_train['Price'], plot=plt)

df_train.drop(['Cars'],axis=1,inplace=True)

df_test.drop('Cars',axis=1,inplace=True)

df_train.drop('Engine',axis=1,inplace=True)
df_test.drop('Engine',axis=1,inplace=True)

df_train['Location'].unique()

df_train.head(2)

from sklearn.preprocessing import OneHotEncoder
trf1 = ColumnTransformer([
    ('ohe',OneHotEncoder(sparse=False,handle_unknown='ignore'),[0,1,4,5,6])
],remainder='passthrough')



from xgboost import XGBRegressor # load the dataset.
X = df_train.drop('Price',axis=1,inplace=False)
Y = df_train['Price']
# X = df_train.iloc[:, :-1].values
# Y = df_train.iloc[:, -1].values.reshape(-1,1)
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=.2, random_state=41)
model = XGBRegressor() # fit model.
# model. fit(X_train, y_train) # define new data.

pipe = make_pipeline(trf1,model)



pipe.fit(X_train,y_train)

pred_scratch = pipe.predict(X_test)

from sklearn.metrics import mean_squared_error
print("MSE",mean_squared_error(y_test, pred_scratch))

yhat = pipe.predict(pd.DataFrame([['Hyundai Creta','Pune',2015,41000,'Diesel','Manual','First',19.67,126.20,5.0]], columns=['Name','Location','Year','Kilometers_Driven','Fuel_Type','Transmission','Owner_Type','Mileage','Power','Seats']))

print(yhat)

import pickle

pickle.dump(pipe, open('usedvehicle2.pkl', 'wb'))